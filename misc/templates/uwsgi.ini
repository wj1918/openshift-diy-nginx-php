[uwsgi]

# Bind to the specified socket using protocol.
socket = ${OPENSHIFT_DATA_DIR}/uwsgi/uwsgi.sock

# Force protocol for the socket
protocol = uwsgi

# Enable uWSGI master process.
master = true

# Spawn the specified number of workers/processes.
processes = 2

# Daemonize uWSGI and write messages into given log file.
daemonize = ${OPENSHIFT_LOG_DIR}/uwsgi.log

# Create pidfile (before privileges drop).
pidfile = ${OPENSHIFT_DATA_DIR}/uwsgi/uwsgi.pid

# Try to remove all of the generated files/sockets
# (UNIX sockets and pidfiles) upon exit.
vacuum = true

# Exit if no app can be loaded.
need-app = true

# Disable request logging.
disable-logging = 1

# Log requests slower than 300 ms.
log-slow = 300

# Rotate log if size is more than 10Mb
# TODO: do we need log-reopen?
log-maxsize = 12328960
log-backupname = ${OPENSHIFT_LOG_DIR}/uwsgi.log.1
log-reopen

# Enable memory usage report.
#memory-report = 1

# Set close-on-exec on sockets
# (could be required for spawning processes in requests).
#close-on-exec = 1


###########################################################
# Application config
###########################################################

# Chdir to specified directory before apps loading.
chdir = ${OPENSHIFT_REPO_DIR}/wsgi

wsgi-file = ${OPENSHIFT_REPO_DIR}/wsgi/application.py

# Load application under mountpoint.
#mount = /v1=${OPENSHIFT_REPO_DIR}/wsgi/application.py

# Automatically rewrite SCRIPT_NAME and PATH_INFO.
# If for some reason your webserver cannot manage SCRIPT_NAME
# on its own you can force uWSGI to rebuild
# the PATH_INFO variable automatically from it.
#manage-script-name = true
